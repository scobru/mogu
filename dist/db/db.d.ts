import { NodeType, EncryptedNode } from './types';
export type { EncryptedNode };
export { NodeType };
export declare const addNode: (state: Map<string, EncryptedNode>, node: EncryptedNode) => Map<string, EncryptedNode>;
export declare const removeNode: (state: Map<string, EncryptedNode>, id: string) => Map<string, EncryptedNode>;
export declare const updateNode: (state: Map<string, EncryptedNode>, node: EncryptedNode) => Map<string, EncryptedNode>;
export declare const getNode: (state: Map<string, EncryptedNode>, id: string) => EncryptedNode | undefined;
export declare const getAllNodes: (state: Map<string, EncryptedNode>) => EncryptedNode[];
export declare const query: (state: Map<string, EncryptedNode>, predicate: (node: EncryptedNode) => boolean) => EncryptedNode[];
export declare const serializeDatabase: (state: Map<string, EncryptedNode>) => Promise<string>;
export declare const deserializeDatabase: (json: string) => Promise<EncryptedNode[]>;
export declare const storeDatabase: (state: Map<string, EncryptedNode>) => Promise<string>;
export declare const retrieveDatabase: (hash: string) => Promise<EncryptedNode[]>;
